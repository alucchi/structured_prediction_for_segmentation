cmake_policy(SET CMP0011 NEW)
cmake_policy(SET CMP0012 NEW)
#cmake_policy(SET CMP0003 NEW)

INCLUDE_REGULAR_EXPRESSION("^.*$")

if(WIN32)
    set(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} -D USE_REVERSE_INDEXING /O2")
        #SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:msvcprt.lib ")
elseif(APPLE)
  set(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} -Wno-deprecated -msse2 -ftemplate-depth-50 -D USE_REVERSE_INDEXING ")
  set(CMAKE_EXE_LINKER_FLAGS         "${CMAKE_LINKER_FLAGS} -Wno-deprecated -msse2 -ftemplate-depth-50")
elseif(UNIX)
  set(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} -D USE_REVERSE_INDEXING ")
  set(CMAKE_C_COMPILER "g++")
  set(CMAKE_CXX_COMPILER "g++")
endif()

SET(CMAKE_BUILD_TYPE Release)
#SET(CMAKE_BUILD_TYPE Debug)

option(USE_ITK "use ITK library" on)
mark_as_advanced(USE_ITK)
option(USE_LIBDAI "use libdai library" on)
mark_as_advanced(USE_LIBDAI)
option(USE_MRF "use MRF library" off)
mark_as_advanced(USE_MRF)
option(USE_MAXFLOW "use maxflow library" on)
mark_as_advanced(USE_MAXFLOW)
option(USE_MULTIOBJ "use multiobj library" on)
mark_as_advanced(USE_MULTIOBJ)
option(USE_SIFT "use SIFT library" off)
mark_as_advanced(USE_SIFT)


if(WIN32)
    SET(CMAKE_CXX_FLAGS "/DWIN32 /D_WINDOWS /w /Zi /EHsc /GR /MP /openmp ")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /D_AMD64_ ")
elseif(APPLE)
    set(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} -fopenmp")
    set(CMAKE_CXX_FLAGS_DEBUG   "-g -pg")
    set(CMAKE_CXX_FLAGS_RELEASE "-O3")
elseif(UNIX)
    set(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} -fopenmp")
    set(CMAKE_CXX_FLAGS_DEBUG   "-g -pg")
    set(CMAKE_CXX_FLAGS_RELEASE "-O3")
else()
    message(WARNING "unrecognized architecture")
endif()

set(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} -D WITH_PNG -D WITH_OPENMP")
set(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} -D USE_REVERSE_INDEXING")
#set(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} -std=c++0x -std=gnu++0x")

#This is not generic. Let the user set ITK_DIR as environment variable or throught ccmake
#if(USE_ITK)
#  set(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS}   -D USE_ITK")
#  set(ITK_DIR "/home/lucchi/src/ThirdParty/InsightToolkit-3.20.1/build")
#  message(${ITK_DIR})
#endif(USE_ITK)

###################################################################### PACKAGES

#SET(OpenCV_FIND_COMPONENTS   CV CXCORE CVAUX HIGHGUI ML)
#SET(OpenCV_FIND_REQUIRED_COMPONENTS   CV CXCORE CVAUX HIGHGUI ML)
#set(OpenCV_DIR ~/src/third_party/opencv-2.4.9/)
set(OpenCV_DIR ~/src/ThirdParty/OpenCV-2.4.2/ CACHE STRING "opencv dir path" )
include_directories(${OpenCV_DIR}/include/)
include_directories(${OpenCV_DIR}/include/opencv/)
include_directories(${OpenCV_DIR}/standalone/include/)
include_directories(${OpenCV_DIR}/standalone/include/opencv/)

include_directories(${OpenCV_DIR}/3rdparty/zlib)
message(STATUS "opencv's ZLIB include dir: ${OpenCV_DIR}/3rdparty/zlib") 

FIND_PACKAGE(OpenCV REQUIRED)
# add include directories
include_directories(${OPENCV_INCLUDE_DIR})
#find_library(ML_LIBRARY NAMES opencv_ml PATHS ${OpenCV_DIR}/lib/)
#find_library(ML_LIBRARY NAMES ml PATHS ${OpenCV_DIR}/lib/)
#SET(OpenCV_LIBS ${OpenCV_LIBS} ${ML_LIBRARY})
message(STATUS "OpenCV DIR: ${OpenCV_DIR}")
message(STATUS "OpenCV include dir: ${OPENCV_INCLUDE_DIR}")
##message(STATUS ${OpenCV_LIBS})
#message(STATUS ${OpenCV_LIBRARIES})
SET(OpenCV_LIBS ${OpenCV_LIBRARIES})

#Superpixel library
find_library(SUPERPIXEL_LIBRARY NAMES supervoxel PATHS ${SLICEME_DIR}/lib/slic/
                                                       ${SLICEME_DIR}/lib/slic/build
                                                       ${SLICEME_DIR}/lib/slic/build/Release)

# ITK
if(USE_ITK)
find_package(ITK REQUIRED)
set(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS}   -D USE_ITK")
endif(USE_ITK)

###################################################################### INCLUDES

# include directories
include_directories(${SLICEME_DIR}/core/)

# superpixel/supervoxel library
include_directories(${SLICEME_DIR}/lib/slic/)

# libsvm
#include_directories(${SLICEME_DIR}/lib/libsvm-3.0)

# ITK
if(USE_ITK)
IF(ITK_FOUND)
  INCLUDE(${ITK_USE_FILE})
  # include itk aux
  # lib/itkStructureTensorRecursiveGaussianImageFilter.h
  # lib/itkStructureTensorRecursiveGaussianImageFilter.txx
  include_directories(${SLICEME_DIR}/lib/)
ENDIF(ITK_FOUND)
endif(USE_ITK)

# libDAI
if(USE_LIBDAI)
include_directories(${SLICEME_DIR}/lib/libDAI024/include/)
find_library(LIBDAI_LIBRARY NAMES dai PATHS "${SLICEME_DIR}/lib/libDAI024/"
                                            "${SLICEME_DIR}/lib/libDAI024/build/"
                                            "${SLICEME_DIR}/lib/libDAI024/build/Release/")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D USE_LIBDAI")
#libDAI requires boost/foreach.hpp ? 
find_package(Boost 1.37.0 COMPONENTS program_options REQUIRED)
include_directories(${Boost_INCLUDE_DIRS})
endif(USE_LIBDAI)

# MRF
if(USE_MRF)
include_directories(${SLICEME_DIR}/lib/MRF2.1/)
find_library(MRF_LIBRARY NAMES MRF PATHS ${SLICEME_DIR}/lib/MRF2.1/)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D USE_MRF")
endif(USE_MRF)

# maxflow
if(USE_MAXFLOW)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D USE_MAXFLOW")
include_directories(${SLICEME_DIR}/lib/graphCuts/)
endif(USE_MAXFLOW)

#multiobj
if(USE_MULTIOBJ)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D USE_MULTIOBJ")
endif(USE_MULTIOBJ)

# sift
if(USE_SIFT)
set(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS}   -D USE_SIFT")
find_library(SIFT_LIBRARY NAMES sift PATHS ${SLICEME_DIR}/lib/siftpp/g64)
include_directories(${SLICEME_DIR}/lib/siftpp)
endif(USE_SIFT)

#find_package(ZLIB)
#if(NOT ZLIB_FOUND)
#set(ZLIB_INCLUDE_DIRS ${SLICEME_DIR}/lib/zlib-1.2.3-lib/include CACHE STRING "zlib include dir")
#set(ZLIB_LIBRARIES ${SLICEME_DIR}/lib/zlib-1.2.3-lib/lib/zlib.lib CACHE STRING "zlib lib")
#else()
#set(ZLIB_INCLUDE_DIRS ${ZLIB_INCLUDE_DIR} CACHE STRING "zlib include dir")
#set(ZLIB_LIBRARIES ${ZLIB_LIBRARY} CACHE STRING "zlib lib")
#endif()

include_directories(${ZLIB_INCLUDE_DIRS})
message(STATUS "zlib include dir: ${ZLIB_INCLUDE_DIRS}")

####################################################################### OPTIONS

set(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS} -g -pg")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -O3")

set(CMAKE_C_FLAGS         ${CMAKE_CXX_FLAGS})
set(CMAKE_C_FLAGS_DEBUG   ${CMAKE_CXX_FLAGS_DEBUG})
set(CMAKE_C_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})

######################################################################### FILES

set(SLICEME_FILES
${SLICEME_DIR}/core/colormap.cpp
${SLICEME_DIR}/core/Config.cpp
${SLICEME_DIR}/core/Feature.cpp
${SLICEME_DIR}/core/F_Bias.cpp
${SLICEME_DIR}/core/F_ColorHistogram.cpp
${SLICEME_DIR}/core/F_Combo.cpp
${SLICEME_DIR}/core/F_Dft.cpp
${SLICEME_DIR}/core/F_Gaussian.cpp
${SLICEME_DIR}/core/F_Glcm.cpp
${SLICEME_DIR}/core/F_Histogram.cpp
${SLICEME_DIR}/core/F_LoadFromFile.cpp
${SLICEME_DIR}/core/F_OrientedHistogram.cpp
${SLICEME_DIR}/core/F_Position.cpp
${SLICEME_DIR}/core/F_Precomputed.cpp
${SLICEME_DIR}/core/Histogram.cpp
${SLICEME_DIR}/core/oSVM.cpp
${SLICEME_DIR}/core/Slice3d.cpp
${SLICEME_DIR}/core/Slice.cpp
${SLICEME_DIR}/core/Slice_P.cpp
${SLICEME_DIR}/core/Supernode.cpp
${SLICEME_DIR}/core/StatModel.cpp
${SLICEME_DIR}/core/utils.cpp
${SLICEME_DIR}/core/svm_struct/svm_struct_common.c
${SLICEME_DIR}/core/svm_struct/svm_struct_learn.c
${SLICEME_DIR}/core/svm_light/svm_common.c
${SLICEME_DIR}/core/svm_light/svm_hideo.c
${SLICEME_DIR}/core/svm_light/svm_learn.c
${SLICEME_DIR}/core/svm_struct_api.c
${SLICEME_DIR}/core/svm_struct_learn_custom.c
${SLICEME_DIR}/core/constraint_set.cpp
${SLICEME_DIR}/core/label_cache.cpp
${SLICEME_DIR}/core/inference_globals.cpp
${SLICEME_DIR}/core/energyParam.cpp
${SLICEME_DIR}/core/inference.cpp
${SLICEME_DIR}/core/graphInference.cpp
${SLICEME_DIR}/core/gi_ICM.cpp
${SLICEME_DIR}/core/gi_max.cpp
${SLICEME_DIR}/core/gi_MF.cpp
${SLICEME_DIR}/core/gi_sampling.cpp
)

if(WIN32)
set(SLICEME_FILES ${SLICEME_FILES}
${SLICEME_DIR}/core/gettimeofday.c
${SLICEME_DIR}/core/getopt.c
${SLICEME_DIR}/core/getopt_long.c
)
endif()

SET_SOURCE_FILES_PROPERTIES( ${SLICEME_FILES} PROPERTIES LANGUAGE CXX )
SET_SOURCE_FILES_PROPERTIES( ${SLICEME_DIR}/core/getopt_long.c ${SLICEME_DIR}/core/getopt.h ${SLICEME_DIR}/core/getopt.c PROPERTIES LANGUAGE C )

if(USE_LIBDAI)
set(SLICEME_FILES ${SLICEME_FILES} ${SLICEME_DIR}/core/gi_libDAI.cpp)
set(INFERENCE_THIRD_PARTY_LIBRARIES ${INFERENCE_THIRD_PARTY_LIBRARIES} ${LIBDAI_LIBRARY})
endif(USE_LIBDAI)

if(USE_MRF)
set(SLICEME_FILES ${SLICEME_FILES} ${SLICEME_DIR}/core/gi_MRF.cpp)
set(INFERENCE_THIRD_PARTY_LIBRARIES ${INFERENCE_THIRD_PARTY_LIBRARIES} ${MRF_LIBRARY})
endif(USE_MRF)

if(USE_MAXFLOW)
set(SLICEME_FILES ${SLICEME_FILES} ${SLICEME_DIR}/core/gi_maxflow.cpp)
endif(USE_MAXFLOW)

if(USE_MULTIOBJ)
set(SLICEME_FILES ${SLICEME_FILES} ${SLICEME_DIR}/core/gi_multiobject.cpp)
endif(USE_MULTIOBJ)

if(USE_ITK)
set(SLICEME_FILES ${SLICEME_FILES}
${SLICEME_DIR}/core/F_Filter.cpp
${SLICEME_DIR}/core/F_GradientStats.cpp)
endif(USE_ITK)

if(USE_SIFT)
set(SLICEME_FILES ${SLICEME_FILES}
${SLICEME_DIR}/core/F_Sift.cpp
${SLICEME_DIR}/lib/siftpp/sift.cpp)
endif(USE_SIFT)

set(INFERENCE_THIRD_PARTY_LIBRARIES ${INFERENCE_THIRD_PARTY_LIBRARIES} ${ZLIB_LIBRARIES})

##################################################################### LIBRARIES

set(SLICEME_THIRD_PARTY_LIBRARIES ${OpenCV_LIBRARIES} ${SUPERPIXEL_LIBRARY} ${INFERENCE_THIRD_PARTY_LIBRARIES})

if(USE_ITK)
    if( ${ITK_VERSION_MAJOR} VERSION_LESS "4.0")
        set(SLICEME_THIRD_PARTY_LIBRARIES ${SLICEME_THIRD_PARTY_LIBRARIES} ITKIO ITKStatistics)
    else()
      set(SLICEME_THIRD_PARTY_LIBRARIES ${SLICEME_THIRD_PARTY_LIBRARIES} ${ITK_LIBRARIES})
    endif()
endif()

